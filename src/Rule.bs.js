// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Hand$PokerHandReason = require("./Hand.bs.js");

function checkPair(hand) {
  var match = List.split(hand);
  var values = match[0];
  if (values) {
    var match$1 = values[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          var match$4 = match$3[1];
          if (match$4 && !match$4[1]) {
            var b = match$1[0];
            var a = values[0];
            if (a === b) {
              return /* Pair */Block.__(1, [a]);
            } else {
              var c = match$2[0];
              if (b === c) {
                return /* Pair */Block.__(1, [b]);
              } else {
                var d = match$3[0];
                if (c === d) {
                  return /* Pair */Block.__(1, [c]);
                } else if (d === match$4[0]) {
                  return /* Pair */Block.__(1, [d]);
                } else {
                  return /* NotFound */0;
                }
              }
            }
          } else {
            return /* NotFound */0;
          }
        } else {
          return /* NotFound */0;
        }
      } else {
        return /* NotFound */0;
      }
    } else {
      return /* NotFound */0;
    }
  } else {
    return /* NotFound */0;
  }
}

function checkTwoPair(hand) {
  var match = List.split(hand);
  var values = match[0];
  if (values) {
    var match$1 = values[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          var match$4 = match$3[1];
          if (match$4 && !match$4[1]) {
            var d = match$3[0];
            var c = match$2[0];
            var b = match$1[0];
            var a = values[0];
            if (a === b && c === d) {
              return /* TwoPairs */Block.__(2, [/* tuple */[
                          a,
                          c
                        ]]);
            } else {
              var e = match$4[0];
              if (b === c && d === e) {
                return /* TwoPairs */Block.__(2, [/* tuple */[
                            b,
                            d
                          ]]);
              } else if (a === b && d === e) {
                return /* TwoPairs */Block.__(2, [/* tuple */[
                            a,
                            d
                          ]]);
              } else {
                return /* NotFound */0;
              }
            }
          } else {
            return /* NotFound */0;
          }
        } else {
          return /* NotFound */0;
        }
      } else {
        return /* NotFound */0;
      }
    } else {
      return /* NotFound */0;
    }
  } else {
    return /* NotFound */0;
  }
}

function checkThreeOfAKind(hand) {
  var match = List.split(hand);
  var values = match[0];
  if (values) {
    var match$1 = values[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          var match$4 = match$3[1];
          if (match$4 && !match$4[1]) {
            var c = match$2[0];
            var b = match$1[0];
            var a = values[0];
            if (a === b && b === c) {
              return /* ThreeOfAKind */Block.__(3, [a]);
            } else {
              var d = match$3[0];
              if (b === c && c === d) {
                return /* ThreeOfAKind */Block.__(3, [b]);
              } else if (c === d && d === match$4[0]) {
                return /* ThreeOfAKind */Block.__(3, [c]);
              } else {
                return /* NotFound */0;
              }
            }
          } else {
            return /* NotFound */0;
          }
        } else {
          return /* NotFound */0;
        }
      } else {
        return /* NotFound */0;
      }
    } else {
      return /* NotFound */0;
    }
  } else {
    return /* NotFound */0;
  }
}

function checkStraight(hand) {
  var match = List.split(hand);
  var valueNumber = List.map(Hand$PokerHandReason.valueToNumber, match[0]);
  if (valueNumber) {
    var match$1 = valueNumber[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          var match$4 = match$3[1];
          if (match$4 && !match$4[1]) {
            var e = match$4[0];
            var d = match$3[0];
            var c = match$2[0];
            var b = match$1[0];
            if (b === (valueNumber[0] + 1 | 0) && c === (b + 1 | 0) && d === (c + 1 | 0) && e === (d + 1 | 0)) {
              return /* Straight */Block.__(4, [Hand$PokerHandReason.numberToValue(e)]);
            } else {
              return /* NotFound */0;
            }
          } else {
            return /* NotFound */0;
          }
        } else {
          return /* NotFound */0;
        }
      } else {
        return /* NotFound */0;
      }
    } else {
      return /* NotFound */0;
    }
  } else {
    return /* NotFound */0;
  }
}

function checkFlush(hand) {
  var cards = List.split(hand);
  var match = cards[0];
  if (match) {
    var match$1 = match[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          var match$4 = match$3[1];
          if (match$4 && !match$4[1]) {
            var match$5 = cards[1];
            if (match$5) {
              var match$6 = match$5[1];
              if (match$6) {
                var match$7 = match$6[1];
                if (match$7) {
                  var match$8 = match$7[1];
                  if (match$8) {
                    var match$9 = match$8[1];
                    if (match$9 && !match$9[1]) {
                      var d = match$8[0];
                      var c = match$7[0];
                      var b = match$6[0];
                      if (match$5[0] === b && b === c && c === d && d === match$9[0]) {
                        return /* Flush */Block.__(5, [match$4[0]]);
                      } else {
                        return /* NotFound */0;
                      }
                    } else {
                      return /* NotFound */0;
                    }
                  } else {
                    return /* NotFound */0;
                  }
                } else {
                  return /* NotFound */0;
                }
              } else {
                return /* NotFound */0;
              }
            } else {
              return /* NotFound */0;
            }
          } else {
            return /* NotFound */0;
          }
        } else {
          return /* NotFound */0;
        }
      } else {
        return /* NotFound */0;
      }
    } else {
      return /* NotFound */0;
    }
  } else {
    return /* NotFound */0;
  }
}

function checkFullHouse(hand) {
  var match = List.split(hand);
  var values = match[0];
  if (values) {
    var match$1 = values[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          var match$4 = match$3[1];
          if (match$4 && !match$4[1]) {
            var e = match$4[0];
            var d = match$3[0];
            var c = match$2[0];
            var b = match$1[0];
            var a = values[0];
            if (a === b && b === c && d === e) {
              return /* FullHouse */Block.__(6, [a]);
            } else if (a === b && c === d && d === e) {
              return /* FullHouse */Block.__(6, [c]);
            } else {
              return /* NotFound */0;
            }
          } else {
            return /* NotFound */0;
          }
        } else {
          return /* NotFound */0;
        }
      } else {
        return /* NotFound */0;
      }
    } else {
      return /* NotFound */0;
    }
  } else {
    return /* NotFound */0;
  }
}

function checkFourOfAKind(hand) {
  var match = List.split(hand);
  var values = match[0];
  if (values) {
    var match$1 = values[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          var match$4 = match$3[1];
          if (match$4 && !match$4[1]) {
            var d = match$3[0];
            var c = match$2[0];
            var b = match$1[0];
            var a = values[0];
            if (a === b && b === c && c === d) {
              return /* FourOfAKind */Block.__(7, [a]);
            } else {
              var e = match$4[0];
              if (b === c && c === d && d === e) {
                return /* FourOfAKind */Block.__(7, [e]);
              } else {
                return /* NotFound */0;
              }
            }
          } else {
            return /* NotFound */0;
          }
        } else {
          return /* NotFound */0;
        }
      } else {
        return /* NotFound */0;
      }
    } else {
      return /* NotFound */0;
    }
  } else {
    return /* NotFound */0;
  }
}

function checkStraightFlush(hand) {
  var match = List.split(hand);
  var suits = match[1];
  var cards_000 = List.map(Hand$PokerHandReason.valueToNumber, match[0]);
  var match$1 = cards_000;
  if (match$1) {
    var match$2 = match$1[1];
    if (match$2) {
      var match$3 = match$2[1];
      if (match$3) {
        var match$4 = match$3[1];
        if (match$4) {
          var match$5 = match$4[1];
          if (match$5 && !(match$5[1] || !suits)) {
            var match$6 = suits[1];
            if (match$6) {
              var match$7 = match$6[1];
              if (match$7) {
                var match$8 = match$7[1];
                if (match$8) {
                  var match$9 = match$8[1];
                  if (match$9 && !match$9[1]) {
                    var sd = match$8[0];
                    var sc = match$7[0];
                    var sb = match$6[0];
                    var ve = match$5[0];
                    var vd = match$4[0];
                    var vc = match$3[0];
                    var vb = match$2[0];
                    if (suits[0] === sb && sb === sc && sc === sd && sd === match$9[0] && vb === (match$1[0] + 1 | 0) && vc === (vb + 1 | 0) && vd === (vc + 1 | 0) && ve === (vd + 1 | 0)) {
                      return /* StraightFlush */Block.__(8, [Hand$PokerHandReason.numberToValue(ve)]);
                    } else {
                      return /* NotFound */0;
                    }
                  } else {
                    return /* NotFound */0;
                  }
                } else {
                  return /* NotFound */0;
                }
              } else {
                return /* NotFound */0;
              }
            } else {
              return /* NotFound */0;
            }
          } else {
            return /* NotFound */0;
          }
        } else {
          return /* NotFound */0;
        }
      } else {
        return /* NotFound */0;
      }
    } else {
      return /* NotFound */0;
    }
  } else {
    return /* NotFound */0;
  }
}

function checkAndPass(checkFunction, wrapHand) {
  if (wrapHand.tag) {
    var hand = wrapHand[0];
    var result = Curry._1(checkFunction, hand);
    if (typeof result === "number") {
      return /* NotDone */Block.__(1, [hand]);
    } else {
      return /* Done */Block.__(0, [result]);
    }
  } else {
    return /* Done */Block.__(0, [wrapHand[0]]);
  }
}

function getHighestCard(hand) {
  var highestCard = checkAndPass(checkPair, checkAndPass(checkTwoPair, checkAndPass(checkThreeOfAKind, checkAndPass(checkStraight, checkAndPass(checkFlush, checkAndPass(checkFullHouse, checkAndPass(checkFourOfAKind, checkAndPass(checkStraightFlush, /* NotDone */Block.__(1, [hand])))))))));
  if (highestCard.tag) {
    return /* NotFound */0;
  } else {
    return highestCard[0];
  }
}

exports.checkPair = checkPair;
exports.checkTwoPair = checkTwoPair;
exports.checkThreeOfAKind = checkThreeOfAKind;
exports.checkStraight = checkStraight;
exports.checkFlush = checkFlush;
exports.checkFullHouse = checkFullHouse;
exports.checkFourOfAKind = checkFourOfAKind;
exports.checkStraightFlush = checkStraightFlush;
exports.checkAndPass = checkAndPass;
exports.getHighestCard = getHighestCard;
/* No side effect */
